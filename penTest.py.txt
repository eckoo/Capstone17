import bluetooth
import numpy as np
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe'
import cv2
from PIL import Image
def scan():

    print("Scanning for bluetooth devices:")

    devices = bluetooth.discover_devices(lookup_names = True, lookup_class = True)

    number_of_devices = len(devices)
    print(number_of_devices,"devices found")
    temp_dev = [0] * number_of_devices
    count = 0
    for addr, name, device_class in devices:
        print("\n")
        print(count + 1)
        print("Device:")
        print("Device Name: %s" % (name))
        print("Device MAC Address: %s" % (addr))
        temp_dev[count] = addr
        count += 1
        print("Device Class: %s" % (device_class))
        print("\n")

    return temp_dev


available_addresses = scan()
count = len(available_addresses)
if(count == 0):
    exit()

sel = input("Select Device from List\n")
while(sel.isdigit() == False):
    sel = input("Select Device from List\n")
    while(sel > count or sel < 1):
        sel = input("Select Device from List\n")

mysock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)

mysock.connect((available_addresses[int(sel) - 1],1))
msg = "yopo"
mysock.send(msg.encode())
framesize = 30
frame = [ [0] * (framesize) for i in range(framesize)]#im adding one so that the frame always has a white border
while(True):
    frame = [ [0] * (framesize) for i in range(framesize)]
    x = 0
    y = 0
    while(True):
        data = mysock.recv(1024)
        data = data.decode('utf-8')
        accel_data = data.split(",")
        if(len(data) < 2):
            break
        try:
            x = accel_data[0]
            y = accel_data[1]
        except:
            break
        try:
            if(int(x) > framesize):
                x = str(framesize - 1)
            if(int(y) > framesize - 1):
                y = str(framesize - 1)
        except:
            x = 0
            y = 0
            frame[int(x)][int(y)] = 0 #burn the first indice since it contains the print statement    
            continue
        frame[int(x)][int(y)] = 255
        print("--------------------------\n")
        for z in range(framesize): #should be the rows
                line = ""
                for j in range(framesize): #should be the columns
                    if(frame[z][j] == 255):
                        line += "*"
                    else:
                        line += " "
                print(line)
        print("-------------------------- x =" + str(x) + "y=" + str(y))

        
    #I want to break and then create an image
    w, h = framesize, framesize
    # Define the pixel size of each square in the image
    pixel_size = 1

    # Determine the dimensions of the image based on the size of the input array
    width = len(frame[0]) * pixel_size
    height = len(frame) * pixel_size

    # Create a new image of the appropriate size and color
    zoomval = 100
    img = Image.new('RGB', (width + zoomval, height + zoomval), color='white') #zooming out by 100 pixels

    # Iterate over each pixel in the image and set its color based on the value in the array
    skewval = 10
    stretchval = 4
    for y in range(len(frame)):
        for x in range(len(frame[y])):
            color = (0, 0, 0) if frame[y][x] else (255, 255, 255)
            img.putpixel(((x * pixel_size) + skewval, (y * pixel_size) + skewval + stretchval), color)
            
            #trying to stretch the y axis by 3 

    # Save the image to a file
    img.save('output.png') 
    image = cv2.imread('output.png')

    string = pytesseract.image_to_string(img, lang = 'eng', config='--psm 10 --oem 1 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')

    print("Decoded: " + string[0])

    imstupid = input("press any key to continue")